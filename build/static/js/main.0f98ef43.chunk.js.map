{"version":3,"sources":["Hourly.js","Daily.js","App.js","index.js"],"names":["Hourly","dt","hour","className","Date","getHours","src","weather","icon","alt","description","Math","round","main","temp","feels_like","Daily","day","date","getDay","getDate","getMonth","forecast","map","App","BASE_URL","API_KEY","UNITS","useState","fetched","setFetched","search","setSearch","query","setQuery","isLoaded","setIsLoaded","structuredData","setStructuredData","error","setError","useEffect","fetchWeatherByLocation","fetchWeather","Object","keys","length","structureData","navigator","geolocation","getCurrentPosition","position","a","fetch","coords","latitude","longitude","res","json","dataFetched","console","log","status","window","alert","initialDate","list","finalData","forEach","item","itemDate","push","setDate","err","convertDate","onSubmit","e","preventDefault","type","value","onChange","target","city","name","country","coord","lat","lon","sunset","getMinutes","sunrise","pressure","humidity","cod","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f98ef43.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Hourly({ hour }) {\r\n  const getHour = (dt) => {\r\n    const date = new Date(dt * 1000);\r\n    return date.getHours();\r\n  };\r\n  return (\r\n    <li className='hour'>\r\n      <p>\r\n        {getHour(hour.dt)}\r\n        <span>00</span>\r\n      </p>\r\n      <div className='weather'>\r\n        <div className='weather-img'>\r\n          <img\r\n            src={`http://openweathermap.org/img/wn/${hour.weather[0].icon}.png`}\r\n            alt=''\r\n          />\r\n        </div>\r\n        <p>{hour.weather[0].description}</p>\r\n      </div>\r\n      <p>\r\n        {Math.round(hour.main.temp)} °C ({Math.round(hour.main.feels_like)} °C)\r\n      </p>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Hourly;\r\n","import React from 'react';\r\nimport Hourly from './Hourly';\r\n\r\nfunction Daily({ day }) {\r\n  const days = [\r\n    'Duminică',\r\n    'Luni',\r\n    'Marți',\r\n    'Miercuri',\r\n    'Joi',\r\n    'Vineri',\r\n    'Sâmbătă',\r\n  ];\r\n  const months = [\r\n    'Ianuarie',\r\n    'Februarie',\r\n    'Martie',\r\n    'Aprilie',\r\n    'Mai',\r\n    'Iunie',\r\n    'Iulie',\r\n    'August',\r\n    'Septembrie',\r\n    'Octombie',\r\n    'Noiembrie',\r\n    'Decembrie',\r\n  ];\r\n  return (\r\n    <li className='day'>\r\n      <h3>{`${days[day.date.getDay()]}, ${day.date.getDate()} ${\r\n        months[day.date.getMonth()]\r\n      }`}</h3>\r\n      <ul className='hourly'>\r\n        {day.forecast.map((hour) => (\r\n          <Hourly key={hour.dt} hour={hour} />\r\n        ))}\r\n      </ul>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Daily;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Daily from './Daily';\r\n\r\nfunction App() {\r\n  const BASE_URL = 'http://api.openweathermap.org/data/2.5/forecast?',\r\n    API_KEY = '15a8a971b6ae66dd707d9d4bb2a235ac',\r\n    UNITS = 'metric',\r\n    LANG = 'RO';\r\n\r\n  const [fetched, setFetched] = useState({});\r\n  const [search, setSearch] = useState('');\r\n  const [query, setQuery] = useState('');\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [structuredData, setStructuredData] = useState([]);\r\n  const [error, setError] = useState({});\r\n  useEffect(() => {\r\n    fetchWeatherByLocation();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchWeather();\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(fetched).length > 2) {\r\n      structureData();\r\n    }\r\n  }, [fetched]);\r\n\r\n  const fetchWeatherByLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(async (position) => {\r\n        try {\r\n          const res = await fetch(\r\n            `${BASE_URL}lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=${UNITS}&lang=${LANG}&appid=${API_KEY}`\r\n          );\r\n          const dataFetched = await res.json();\r\n          console.log(fetched);\r\n          if (res.status === 200) {\r\n            setFetched(dataFetched);\r\n            structureData();\r\n          } else {\r\n            setError(dataFetched);\r\n          }\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      });\r\n    } else {\r\n      window.alert('Geolocation is not supported by this browser.');\r\n    }\r\n  };\r\n\r\n  const fetchWeather = async () => {\r\n    if (query !== '') {\r\n      setFetched({});\r\n      setStructuredData([]);\r\n      setIsLoaded(false);\r\n      setError({});\r\n      try {\r\n        const res = await fetch(\r\n          `${BASE_URL}q=${query}&units=${UNITS}&lang=${LANG}&appid=${API_KEY}`\r\n        );\r\n        const dataFetched = await res.json();\r\n        if (res.status === 200) {\r\n          setFetched(dataFetched);\r\n          structureData();\r\n        } else {\r\n          setError(dataFetched);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const getSearch = (e) => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch('');\r\n  };\r\n\r\n  const structureData = () => {\r\n    try {\r\n      if (Object.keys(fetched).length > 2) {\r\n        let initialDate = new Date(fetched.list[0].dt * 1000);\r\n        let forecast = [];\r\n        let date = new Date();\r\n        const finalData = [];\r\n        fetched.list.forEach((item) => {\r\n          const itemDate = new Date(item.dt * 1000);\r\n          if (itemDate.getDate() === initialDate.getDate()) {\r\n            const { dt, main, weather } = item;\r\n            forecast.push({ dt, main, weather });\r\n            date = itemDate;\r\n          } else {\r\n            finalData.push({ forecast, date });\r\n            initialDate.setDate(itemDate.getDate());\r\n            forecast = [];\r\n          }\r\n        });\r\n        setIsLoaded(true);\r\n        setStructuredData(finalData);\r\n      } else {\r\n        console.log('Im here');\r\n        setStructuredData([]);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const convertDate = (dt) => {\r\n    const date = new Date(dt * 1000);\r\n    return date;\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className='app-title'>\r\n        <h1>\r\n          <i className='fas fa-cloud-sun-rain'></i>Meteo\r\n        </h1>\r\n      </div>\r\n      <form className='search' onSubmit={getSearch}>\r\n        <input type='text' value={search} onChange={updateSearch} />\r\n        <button type='submit'>Cauta</button>\r\n      </form>\r\n      {isLoaded === true &&\r\n      Object.keys(fetched).length > 2 &&\r\n      Object.keys(error).length === 0 ? (\r\n        <div className='result-container'>\r\n          <h2 className='city-title'>\r\n            {fetched.city.name}, <span>{fetched.city.country}</span>\r\n          </h2>\r\n          <h4 className='city-coords'>\r\n            ({fetched.city.coord.lat}, {fetched.city.coord.lon})\r\n          </h4>\r\n          <div className='current'>\r\n            <div className='current-img'>\r\n              <img\r\n                src={`http://openweathermap.org/img/wn/${structuredData[0].forecast[0].weather[0].icon}@4x.png`}\r\n                alt=''\r\n              />\r\n            </div>\r\n            <h3>\r\n              {Math.round(structuredData[0].forecast[0].main.temp)} °C ( se\r\n              simte ca{' '}\r\n              {Math.round(structuredData[0].forecast[0].main.feels_like)} °C)\r\n            </h3>\r\n            <h3>{structuredData[0].forecast[0].weather[0].description}</h3>\r\n          </div>\r\n          <div className='additional-info'>\r\n            <p>\r\n              <b>Apus:</b>\r\n              {` ${convertDate(fetched.city.sunset).getHours()}:${convertDate(\r\n                fetched.city.sunset\r\n              ).getMinutes()}`}\r\n              <br />\r\n              <b>Răsărit:</b>\r\n              {` ${convertDate(fetched.city.sunrise).getHours()}:${convertDate(\r\n                fetched.city.sunrise\r\n              ).getMinutes()}`}\r\n            </p>\r\n            <p>\r\n              <b>Presiune:</b> {structuredData[0].forecast[0].main.pressure} hPa{' '}\r\n              <br />\r\n              <b>Umiditate:</b> {structuredData[0].forecast[0].main.humidity} %\r\n            </p>\r\n          </div>\r\n          <ul className='daily'>\r\n            {structuredData.map((day) => (\r\n              <Daily key={day.date} day={day} />\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : Object.keys(error).length !== 0 ? (\r\n        <h1>\r\n          Error {error.cod}: {error.message}\r\n        </h1>\r\n      ) : (\r\n        <h1>Loading</h1>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}